local colors = {
  black = Color3.fromRGB(0, 0, 0),
  white = Color3.fromRGB(255, 255, 255),
  normal = Color3.fromRGB(255, 255, 255),
  red = Color3.fromRGB(255, 0, 0),
  green = Color3.fromRGB(0, 255, 0),
  blue = Color3.fromRGB(0, 0, 255),
  yellow = Color3.fromRGB(255, 255, 0),
  orange = Color3.fromRGB(255, 165, 0),
  purple = Color3.fromRGB(128, 0, 128),
  pink = Color3.fromRGB(255, 192, 203),
  gray = Color3.fromRGB(128, 128, 128),
  dark = Color3.fromRGB(0, 0, 0),
  light = Color3.fromRGB(255, 255, 255),
  brown = Color3.fromRGB(165, 42, 42),
  cyan = Color3.fromRGB(0, 255, 255),
  magenta = Color3.fromRGB(255, 0, 255),
  lime = Color3.fromRGB(0, 255, 0),
  teal = Color3.fromRGB(0, 128, 128),
  navy = Color3.fromRGB(0, 0, 128),
  maroon = Color3.fromRGB(128, 0, 0),
  olive = Color3.fromRGB(128, 128, 0),
  silver = Color3.fromRGB(192, 192, 192),
  gold = Color3.fromRGB(255, 215, 0)
}

local function getcol(name)
  return colors[name] or Color3.fromRGB(0, 0, 0)
end

local plr = game:GetService("Players").LocalPlayer
local queue = {}
local busy = false

local Notflib = {}

local function notf(data)
  busy = true
  local titl, txt, del, col, txxcol, si, form, so = unpack(data)
  del = del or 5
  col = col or 'black'
  txxcol = txxcol or 'normal'
  si = si or 5

  local ts = game:GetService("TweenService")
  local sg = Instance.new("ScreenGui")
  sg.ResetOnSpawn = false
  sg.Name = "NotflibUI"
  sg.Parent = plr:WaitForChild("PlayerGui")

  local fr = Instance.new("Frame")
  fr.Name = "MainFrame"
  fr.Size = UDim2.new(0, 200, 0, 35)
  fr.AnchorPoint = Vector2.new(1, 1)
  fr.Position = UDim2.new(1, -10, 1, 60)
  fr.BackgroundColor3 = getcol(col)
  fr.BorderSizePixel = 0
  fr.Parent = sg

  local fm = Instance.new("Frame")
  fm.Name = "ShadowFrame"
  fm.Size = UDim2.new(0, 200, 0, 85)
  fm.Position = UDim2.new(0, 0, 0.8, 3)
  fm.BackgroundColor3 = getcol(col)
  fm.BackgroundTransparency = 0.1
  fm.BorderSizePixel = 0
  fm.Parent = fr

  if col == 'red-white' or col == 'red-light' then
    fr.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
    fm.BackgroundColor3 = Color3.fromRGB(255, 255, 255)

  elseif col == 'white-red' then
    fr.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    fm.BackgroundColor3 = Color3.fromRGB(255, 0, 0)

  elseif col == 'white-white' then
    fr.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    fm.BackgroundColor3 = Color3.fromRGB(255, 255, 255)

  elseif col == 'green-white' or col == 'green-light' then
    fr.BackgroundColor3 = Color3.fromRGB(0, 255, 0)
    fm.BackgroundColor3 = Color3.fromRGB(255, 255, 255)

  elseif col == 'blue-white' or col == 'blue-light' then
    fr.BackgroundColor3 = Color3.fromRGB(0, 0, 255)
    fm.BackgroundColor3 = Color3.fromRGB(255, 255, 255)

  elseif col == 'yellow-white' or col == 'yellow-light' then
    fr.BackgroundColor3 = Color3.fromRGB(255, 255, 0)
    fm.BackgroundColor3 = Color3.fromRGB(255, 255, 255)

  elseif col == 'purple-white' or col == 'purple-light' then
    fr.BackgroundColor3 = Color3.fromRGB(128, 0, 128)
    fm.BackgroundColor3 = Color3.fromRGB(255, 255, 255)

  elseif col == 'orange-white' or col == 'orange-light' then
    fr.BackgroundColor3 = Color3.fromRGB(255, 140, 0)
    fm.BackgroundColor3 = Color3.fromRGB(255, 255, 255)

  elseif col == 'cyan-white' or col == 'cyan-light' then
    fr.BackgroundColor3 = Color3.fromRGB(0, 255, 255)
    fm.BackgroundColor3 = Color3.fromRGB(255, 255, 255)

  elseif col == 'pink-white' or col == 'pink-light' then
    fr.BackgroundColor3 = Color3.fromRGB(255, 105, 180)
    fm.BackgroundColor3 = Color3.fromRGB(255, 255, 255)

  elseif col == 'gray-white' or col == 'grey-light' then
    fr.BackgroundColor3 = Color3.fromRGB(128, 128, 128)
    fm.BackgroundColor3 = Color3.fromRGB(255, 255, 255)

  elseif col == 'white-green' then
    fr.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    fm.BackgroundColor3 = Color3.fromRGB(0, 255, 0)

  elseif col == 'white-blue' then
    fr.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    fm.BackgroundColor3 = Color3.fromRGB(0, 0, 255)

  elseif col == 'white-yellow' then
    fr.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    fm.BackgroundColor3 = Color3.fromRGB(255, 255, 0)

  elseif col == 'white-purple' then
    fr.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    fm.BackgroundColor3 = Color3.fromRGB(128, 0, 128)

  elseif col == 'white-orange' then
    fr.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    fm.BackgroundColor3 = Color3.fromRGB(255, 140, 0)

  elseif col == 'white-black' then
    fr.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    fm.BackgroundColor3 = Color3.fromRGB(0, 0, 0)

  elseif col == 'red-black' or col == 'red-dark' then
    fr.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
    fm.BackgroundColor3 = Color3.fromRGB(0, 0, 0)

  elseif col == 'white-black' then
    fr.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    fm.BackgroundColor3 = Color3.fromRGB(0, 0, 0)

  elseif col == 'black-white' then
    fr.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
    fm.BackgroundColor3 = Color3.fromRGB(255, 255, 255)

  elseif col == 'green-black' or col == 'green-dark' then
    fr.BackgroundColor3 = Color3.fromRGB(0, 255, 0)
    fm.BackgroundColor3 = Color3.fromRGB(0, 0, 0)

  elseif col == 'blue-black' or col == 'blue-dark' then
    fr.BackgroundColor3 = Color3.fromRGB(0, 0, 255)
    fm.BackgroundColor3 = Color3.fromRGB(0, 0, 0)

  elseif col == 'yellow-black' or col == 'yellow-dark' then
    fr.BackgroundColor3 = Color3.fromRGB(255, 255, 0)
    fm.BackgroundColor3 = Color3.fromRGB(0, 0, 0)

  elseif col == 'purple-black' or col == 'purple-dark' then
    fr.BackgroundColor3 = Color3.fromRGB(128, 0, 128)
    fm.BackgroundColor3 = Color3.fromRGB(0, 0, 0)

  elseif col == 'orange-black' or col == 'orange-dark' then
    fr.BackgroundColor3 = Color3.fromRGB(255, 140, 0)
    fm.BackgroundColor3 = Color3.fromRGB(0, 0, 0)

  elseif col == 'cyan-black' or col == 'cyan-dark' then
    fr.BackgroundColor3 = Color3.fromRGB(0, 255, 255)
    fm.BackgroundColor3 = Color3.fromRGB(0, 0, 0)

  elseif col == 'pink-black' or col == 'pink-dark' then
    fr.BackgroundColor3 = Color3.fromRGB(255, 105, 180)
    fm.BackgroundColor3 = Color3.fromRGB(0, 0, 0)

  elseif col == 'gray-black' or col == 'grey-dark' then
    fr.BackgroundColor3 = Color3.fromRGB(128, 128, 128)
    fm.BackgroundColor3 = Color3.fromRGB(0, 0, 0)

  elseif col == 'black-red' then
    fr.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
    fm.BackgroundColor3 = Color3.fromRGB(255, 0, 0)

  elseif col == 'black-green' then
    fr.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
    fm.BackgroundColor3 = Color3.fromRGB(0, 255, 0)

  elseif col == 'black-blue' then
    fr.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
    fm.BackgroundColor3 = Color3.fromRGB(0, 0, 255)

  elseif col == 'black-yellow' then
    fr.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
    fm.BackgroundColor3 = Color3.fromRGB(255, 255, 0)

  elseif col == 'black-purple' then
    fr.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
    fm.BackgroundColor3 = Color3.fromRGB(128, 0, 128)

  elseif col == 'black-orange' then
    fr.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
    fm.BackgroundColor3 = Color3.fromRGB(255, 140, 0)

  elseif col == 'black-white' then
    fr.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
    fm.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
  elseif col == 'greenbl-black' then
    fr.BackgroundColor3 = Color3.fromRGB(0, 200, 0)
    fm.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
  end

  if si == 5 then
    fr.Size = UDim2.new(0, 200, 0, 35)
    fm.Size = UDim2.new(0, 200, 0, 85)
  elseif si == 10 then
    fr.Size = UDim2.new(0, 215, 0, 37)
    fm.Size = UDim2.new(0, 215, 0, 87)
  elseif si == 15 then
    fr.Size = UDim2.new(0, 230, 0, 39)
    fm.Size = UDim2.new(0, 230, 0, 89)
  elseif si == 20 then
    fr.Size = UDim2.new(0, 245, 0, 40)
    fm.Size = UDim2.new(0, 245, 0, 90)
  elseif si == 25 then
    fr.Size = UDim2.new(0, 250, 0, 42)
    fm.Size = UDim2.new(0, 250, 0, 92)
  end

  if form == 'circle' or form == 'corner' then
    local uc = Instance.new("UICorner")
    uc.CornerRadius = UDim.new(0, 5)
    uc.Parent = fr
    local uc2 = Instance.new("UICorner")
    uc2.CornerRadius = UDim.new(0, 5)
    uc2.Parent = fm
  end


  local tx = Instance.new("TextLabel")
  tx.Parent = fr
  tx.AnchorPoint = Vector2.new(0.5, 0)
  tx.Position = UDim2.new(0.5, 0, 0.1, 0)
  tx.Size = UDim2.new(1, -20, 0, 30)
  tx.BackgroundTransparency = 1
  tx.Text = titl
  tx.TextColor3 = getcol(txxcol)
  tx.TextSize = 16
  tx.Font = Enum.Font.GothamBold
  tx.TextXAlignment = Enum.TextXAlignment.Center
  tx.TextYAlignment = Enum.TextYAlignment.Top
  tx.TextWrapped = true

  local tx2 = Instance.new("TextLabel")
  tx2.Parent = fm
  tx2.AnchorPoint = Vector2.new(0.5, 0)
  tx2.Position = UDim2.new(0.5, 5, 0.22, 0)
  tx2.Size = UDim2.new(1, -20, 0, 60)
  tx2.BackgroundTransparency = 1
  tx2.Text = txt
  tx2.TextColor3 = getcol(txxcol)
  tx2.TextSize = 14
  tx2.Font = Enum.Font.Gotham
  tx2.TextXAlignment = Enum.TextXAlignment.Center
  tx2.TextYAlignment = Enum.TextYAlignment.Top
  tx2.TextWrapped = true

  if txxcol == 'black-green' then
    tx.TextColor3 = Color3.fromRGB(0, 0, 0)
    tx2.TextColor3 = Color3.fromRGB(0, 255, 0)
  end

  if so then
    local sound = Instance.new("Sound")
    sound.SoundId = "rbxassetid://9118823104"
    sound.Volume = 1
    sound.Parent = fr
    sound:Play()
  end

  local ti = TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
  local appear = ts:Create(fr, ti, {Position = UDim2.new(1, -10, 1, -100)})
  appear:Play()

  task.wait(del)

  local hide = ts:Create(fr, TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.In), {Position = UDim2.new(1, -10, 1, 60)})
  hide:Play()
  hide.Completed:Connect(function()
    sg:Destroy()
    busy = false
    if #queue > 0 then
      local nextData = table.remove(queue, 1)
      task.defer(notf, nextData)
    end
  end)
end


function Notflib.Send(titl, txt, del, col, txxcol, si, form, so)
  local data = {titl, txt, del, col, txxcol, si, form, so}
  if busy then
    table.insert(queue, data)
  else
    notf(data)
  end
end

local TweenService = game:GetService("TweenService")
local ContentProvider = game:GetService("ContentProvider")
local plr = game.Players.LocalPlayer
local rs = game:GetService("ReplicatedStorage")
local guiyyy = Instance.new("ScreenGui")
local letsgo = true
local loadscript = Instance.new("BoolValue")
loadscript.Name = "LoadScriptOrNo"
loadscript.Parent = rs

for _, file in pairs(rs:GetChildren()) do
  if file:IsA("BoolValue") then
    if file.Value == true then
      if file.Name == "LoadScriptOrNo" then
        letsgo = false
        loadscript:Destroy()
      end
    end
  end
end


if loadscript.Value == false and letsgo == true then
  loadscript.Value = true
  guiyyy.Name = "LoadScreen"
  guiyyy.Parent = game.CoreGui

  local loadscreen = Instance.new("ImageLabel", guiyyy)
  Instance.new("UICorner", loadscreen)

  loadscreen.UICorner.CornerRadius = UDim.new(0.125,0)
  loadscreen.Size = UDim2.new(0.233,0,0.4,0)
  loadscreen.Image = "rbxassetid://119099818451678"
  loadscreen.Position = UDim2.new(0.5,0,0.5,0)
  loadscreen.AnchorPoint = Vector2.new(0.5,0.5)
  loadscreen.BorderSizePixel = 0
  loadscreen.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
  loadscreen.ImageTransparency = 1
  loadscreen.BackgroundTransparency = 1

  task.wait(0.5)

  TweenService:Create(loadscreen, TweenInfo.new(1.5), {ImageTransparency = 0, BackgroundTransparency = 0}):Play()
  task.wait(3)
  TweenService:Create(loadscreen, TweenInfo.new(1.5), {ImageTransparency = 1, BackgroundTransparency = 1}):Play()
  task.wait(1.5)
  guiyyy:Destroy()

  Notflib.Send(
    'Note',
    'ScripT Made By vOiD',
    5,
    'greenbl-black',
    'black-green',
    5,
    'circle',
    true
  )

  Notflib.Send(
    'Note',
    'Enjoy Your Time -_-',
    10,
    'greenbl-black',
    'black-green', 
    10,
    'circle',
    true
  )

  local toggle = false
  local menu = Instance.new("Frame")
  local button = Instance.new("TextButton", menu)

  menu.Size = UDim2.new(0.125,0,0.075,0)
  menu.BackgroundColor3 = Color3.fromRGB(0, 255, 0)

  button.Size = UDim2.new(0.90,0,0.75,0)
  button.Position = UDim2.new(0.5,0,0.5,0)
  button.AnchorPoint = Vector2.new(0.5,0.5)
  button.Text = "WallHop/Off"
  button.TextScaled = true
  button.Font = Enum.Font.Gotham
  button.TextColor3 = Color3.fromRGB(0, 200, 0)
  button.BorderSizePixel = 0
  button.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
  
  menu.Active = true
  menu.Draggable = true

  Instance.new("UICorner", menu)
  Instance.new("UICorner", button)

  local UserInputService = game:GetService("UserInputService")

  local gui = menu

  local dragging
  local dragInput
  local dragStart
  local startPos

  local function update(input)
    local delta = input.Position - dragStart
    gui.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
  end

  gui.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
      dragging = true
      dragStart = input.Position
      startPos = gui.Position

      input.Changed:Connect(function()
        if input.UserInputState == Enum.UserInputState.End then
          dragging = false
        end
      end)
    end
  end)

  gui.InputChanged:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
      dragInput = input
    end
  end)

  UserInputService.InputChanged:Connect(function(input)
    if input == dragInput and dragging then
      update(input)
    end
  end)

  button.MouseButton1Click:Connect(function()
    if toggle == false then
      toggle = true
      button.Text = "WallHop/On"
    else
      toggle = false
      button.Text = "WallHop/Off"
    end
  end)

  local InfiniteJumpEnabled = true
game:GetService("UserInputService").JumpRequest:connect(function()
    if toggle == true then
      if InfiniteJumpEnabled == true then    game:GetService"Players".LocalPlayer.Character:FindFirstChildOfClass'Humanoid':ChangeState("Jumping")
        InfiniteJumpEnabled = false
        game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame * CFrame.Angles(0, -1, 0)
        wait(0.2)
        game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame * CFrame.Angles(0, 1, 0)
        InfiniteJumpEnabled = true
      end
    end
  end)

  local guiyy = Instance.new("ScreenGui")
  guiyy.Name = "WallHopGui"
  guiyy.Parent = game.CoreGui

  menu.Parent = guiyy
end